using ShippingAddress = Domain.Entities.OrderEntities.Address;

namespace Domain.Entities.OrderEntities
{
    public class Order : BaseEntity<Guid>
    {

        public Order() { }
        public Order(string userEmail, ShippingAddress shippingAddress, ICollection<OrderItem> orderItems,
             DeliveryMethod deliveryMethod,
            decimal subtotal)
        {
            UserEmail = userEmail;
            ShippingAddress = shippingAddress;
            OrderItems = orderItems;
            DeliveryMethod = deliveryMethod;
            Subtotal = subtotal;

        }

        public string UserEmail { get; set; }


        public ShippingAddress ShippingAddress { get; set; } //owns
        //(composition 



        public ICollection<OrderItem> OrderItems { get; set; } = new List<OrderItem>();



        public OrderPaymentStatus PaymentStatus { get; set; } = OrderPaymentStatus.Pending;


        public DeliveryMethod DeliveryMethod { get; set; }



        public int? DeliveryMethodId { get; set; }


        public decimal Subtotal { get; set; }

        //for each order Item ==> OrderItem.price * quantity : subtotal
        // Total : Subtotal + ShippingPrice


        public DateTimeOffset OrderDate { get; set; }


        public string PaymentId { get; set; } = string.Empty;


    }
}


//🔧 How GUIDs Are Generated
//Automatically Generated by EF Core:

//If you don’t explicitly set a value for the Guid property, EF Core will automatically generate 
//one for you when you add a new entity to the context.
//It uses Guid.NewGuid() internally to create a new GUID value for the primary key.

//it will store the value as a uniqueidentifier in SQL Server, which is the SQL Server data type for Guid.
//For example, your Orders table will look like this:

//CREATE TABLE Orders (
//    Id UNIQUEIDENTIFIER PRIMARY KEY, -- GUID
//    ProductName NVARCHAR(100)
//);